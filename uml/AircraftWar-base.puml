@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject {
    # locationX: int
    # locationY: int
    # speedX: int
    # speedY: int
    # isValid: boolean
    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward(): void
    + crash(AbstractFlyingObject flyingObject): boolean
    + setLocation(double locationX, double locationY): void
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedY(): int
    + getImage(): BufferedImage
    + getWidth(): int
    + getHeight(): int
    + notValid(): boolean
    + vanish(): void
}

package "aircraft" {
    abstract class AbstractAircraft {
        # maxHp: int
        # hp: int
        + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
        + decreaseHp(int decrease): void
        + getHp(): int
        + {abstract} shoot(): List<BaseBullet>
    }
    class HeroAircraft {
        - shootNum: int
        - power: int
        - direction: int
        + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
        + forward(): void
        + shoot(): List<BaseBullet>
        + increaseHp(int increase): void
    }
    abstract class AbstractEnemyAircraft {
        + AbstractEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
        + forward(): void
        + {abstract} dropProps(): List<AbstractProp>
    }
    class MobEnemy {
        + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
        + shoot(): List<BaseBullet>
        + dropProps(): List<AbstractProp>
    }
    class EliteEnemy {
        - shootNum: int
        - power: int
        - direction: int
        + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
        + shoot(): List<BaseBullet>
        + dropProps(): List<AbstractProp>
    }
}

package "bullet" {
    abstract class BaseBullet {
        - power: int
        + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
        + forward(): void
        + getPower(): int
    }
    class HeroBullet {
        + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
    }
    class EnemyBullet {
        + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
    }
}

package "prop" {
    abstract class AbstractProp {
        + AbstractProp(int locationX, int locationY, int speedX, int speedY)
        + forward(): void
        + {abstract} activate(HeroAircraft hero): void
    }
    class HpProp {
        + HpProp(int locationX, int locationY, int speedX, int speedY)
        + activate(HeroAircraft hero): void
    }
    class FireProp {
        + FireProp(int locationX, int locationY, int speedX, int speedY)
        + activate(HeroAircraft hero): void
    }
    class BombProp {
        + BombProp(int locationX, int locationY, int speedX, int speedY)
        + activate(HeroAircraft hero): void
    }
}

AbstractFlyingObject <|-down- AbstractAircraft
AbstractFlyingObject <|-down- BaseBullet
AbstractFlyingObject <|-down- AbstractProp
AbstractAircraft <|-down- HeroAircraft
AbstractAircraft <|-down- AbstractEnemyAircraft

AbstractEnemyAircraft <|-down- MobEnemy
AbstractEnemyAircraft <|-down- EliteEnemy
BaseBullet <|-down- HeroBullet
BaseBullet <|-down- EnemyBullet
AbstractProp <|-down- HpProp
AbstractProp <|-down- FireProp
AbstractProp <|-down- BombProp

EliteEnemy -right-> EnemyBullet
EliteEnemy ..> AbstractProp

AbstractProp .left.> HeroAircraft
@enduml